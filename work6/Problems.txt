Problem A
深度优先搜索顶点之间的路径（邻接表）
时限：1000ms 内存限制：10000K 总时限：3000ms
描述：


    给出一个有向图（节点个数<=100），试利用邻接表方式存储，然后利用图的深度优先搜索，判断是否存在由顶点vi到顶点vj的路径（i != j）。注意：有多条路径需要判断，每个结果占一行，最后要输出一个回车符。

输入：


从1开始表示第一个节点。
第一行输入: 有向图的边数n，测例的个数m。
之后n行输入：用来描述边，如2 4表示存在一条由顶点2到4的边。
之后是m行输入：用来给出要测的路径，如2 5表示是否存在由顶点2到顶点5的路径。


输出：


对于每个测试例子输出一个结果并占一行。
输出 Y表示源点和终点之间没有路径
输出 N表示源点和终点之间存在路径

输入样例：


3 2

1 2
2 3
4 3

1 4
1 3
输出样例：


NY


Problem B
广度优先搜索顶点之间的路径（邻接表）
时限：1000ms 内存限制：10000K 总时限：3000ms
描述：


    给出一个有向图（节点个数<=100），试利用邻接表方式存储，然后利用图的广度优先搜索，判断是否存在由顶点vi到顶点vj的路径（i不等于j）。有多条路径需要判断，每个结果占一行，最后要输出一个回车符.

输入：


从1开始表示第一个节点。
第一行输入: 有向图的边数n，测例的个数m。
之后n行输入：用来描述边，如2 4表示存在一条由顶点2到4的边。
之后是m行输入：用来给出要测的路径，如2 5表示是否存在由顶点2到顶点5的路径。


输出：


对于每个测试例子输出一个结果并占一行。
输出 Y表示源点和终点之间没有路径
输出 N表示源点和终点之间存在路径


输入样例：


3 21 22 34 31 41 3
输出样例：


NY


Problem C
逆波兰表达式（有向无环图）
时限：1000ms 内存限制：10000K 总时限：3000ms
描述：


    一个四则运算算术表达式，只包含“（”，“）”，“+”，“-”，“*”,“/”，括号可嵌套，利用有向无环图的邻接表达式存储，每个操作数原子都由一个小写字母表示。写一个算法输出其逆波兰表达式（又称后缀表达式）。

输入：


输入长度不超过100的四则运算表达式，中间没有空格,以’#’结尾。

输出：


输出表达式对应的逆波兰表达式

输入样例：


(a+b)*c
输出样例：


ab+c*


Problem D
最短路径的Dijkstra算法（邻接表）
时限：1000ms 内存限制：10000K 总时限：3000ms
描述：


    以邻接表作为存储结构实现，求解从给定源点到给定结束点的最短路径。

输入：



从1开始表示第一个节点。
第一行输入：顶点数n(2<=n<=100),边数m(2<=m<=100)
第二行输入有向边：起始点s1，结束点 s2，边权值 w
第三行输入：源点start，终点end


输出：


若存在路径，输出路径长度；
若不存在，输出-1。

输入样例：


6 8
1 6 100
1 5 30
1 3 10
2 3 5
3 4 50
4 6 10
5 4 20
5 6 60
1 6
输出样例：


60
